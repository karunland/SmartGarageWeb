@{
    ViewData["Title"] = "Ana Sayfa";
}


<div class="container-fluid" style="max-width: 1500px;">
    <div class="col-12 d-flex justify-content-around align-items-stretch" style="height: 60vh;">
        <div class="col-md-6 col-sm-12 mx-5">
            <div>
                <div style="display: flex; flex-direction: row;align-items: stretch; justify-content: space-around;">
                    <div class="col-md-6 sensor-data mb-3">
                        <h4>Yakınlık Sensörü</h4>
                        <div class="box sensor-box" id="proximity-box">
                            <p id="proximity-sensor">Sensör Değeri: </p>
                            <p>Kapıyı Aç </p>
                            <div class="ml-3">
                                <div class="form-check" id="proximity-controls">
                                    <input class="form-check-input" type="radio" name="speed" id="slow" value="30"
                                        checked>
                                    <label class="form-check-label" for="slow">
                                        Yavaş
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="speed" id="fast" value="61">
                                    <label class="form-check-label" for="fast">
                                        Orta
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="speed" id="fast" value="91">
                                    <label class="form-check-label" for="fast">
                                        Hızlı
                                    </label>
                                </div>                                <div class="d-flex" style="justify-content: space-between;">
                                    <button class="btn btn-sm btn-primary" id="open-door">Kapıyı Aç</button>
                                    <button class="btn btn-sm btn-danger" id="close-door">Kapıyı Kapat</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 sensor-data">
                        <h4>Gaz Sensörü</h4>
                        <div class="box sensor-box" id="gas-box">
                            <p id="gas-sensor">Sensör Değeri: </p>
                            <p>Fanı Ayarla</p>
                            <div class="ml-3">
                                <div class="form-check" id="gas-controls">
                                    <input class="form-check-input" type="radio" name="fanSpeed" id="stop" value="0"
                                        checked>
                                    <label class="form-check-label" for="stop">
                                        Durdur
                                    </label>
                                </div>
                               <div class="form-check" id="gas-controls">
                                    <input class="form-check-input" type="radio" name="fanSpeed" id="slow" value="15"
                                        checked>
                                    <label class="form-check-label" for="slow">
                                        Yavaş
                                    </label>
                                </div>                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="fanSpeed" id="medium" value="45">
                                    <label class="form-check-label" for="medium">
                                        Orta
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="fanSpeed" id="fast" value="95">
                                    <label class="form-check-label" for="fast">
                                        Hızlı
                                    </label>
                                </div>
                                <button class="btn btn-sm btn-primary" id="set-fan-speed">Fanı Ayarla</button>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 col-sm-12 mx-5">
                        <div>
                            <h4>Işık Sensörü</h4>
                            <div class="box sensor-box" id="light-box">
                                <p id="light-sensor">Sensör Değeri: </p>
                                <p>Işığı Ayarla</p>
                                <div class="ml-3">
                                    <div class="form-check" id="light-controls">
                                        <input class="form-check-input" type="radio" name="lightBrightness" id="off" value="0" checked>
                                        <label class="form-check-label" for="off">
                                            Kapalı
                                        </label>
                                    </div>
                                    <div class="form-check" id="light-controls">
                                        <input class="form-check-input" type="radio" name="lightBrightness" id="dim" value="5" checked>
                                        <label class="form-check-label" for="dim">
                                            Düşük Parlaklık
                                        </label>
                                    </div>                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="lightBrightness" id="medium" value="35">
                                        <label class="form-check-label" for="medium">
                                            Orta Parlaklık
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="lightBrightness" id="bright" value="99">
                                        <label class="form-check-label" for="bright">
                                            Yüksek Parlaklık
                                        </label>
                                    </div>
                                    <button class="btn btn-sm btn-primary" id="set-brightness">Işığı Ayarla</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="event" class="col-12">
                    @await Component.InvokeAsync("Files")
                </div>
            </div>
        </div>

        <div class="col-md-6 col-sm-12 mx-5">
            <h4>Kamera</h4>
            <div class="stream-container position-relative" style="max-width: 640px;background: #ddd;min-height: 480px;">
                <img id="streamImg" class="img-fluid">
                <div id="recordingIndicator"
                    style="position: absolute;top: 0;right: 0;margin:15px;background: grey;padding: 10px;border-radius: 50%;">
                </div>
            </div>

            <div class="mt-1 d-flex">
                <div>
                    <button class="btn btn-danger" id="startRecordingBtn">Kaydı Başlat</button>
                    <button class="btn btn-warning" id="stopRecordingBtn">Kaydı Durdur</button>
                </div>
                <div style="margin-left: auto;margin-right: 50px;">
                    <button class="btn btn-primary" id="photo">Fotoğraf çek <i class="fa-solid fa-camera fa-lg"></i></button>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form asp-action="SendMail" asp-controller="File" method="POST" data-ajax="true"
                data-ajax-success="OnAjaxSuccess" data-ajax-failure="OnAjaxError">

                <div class="modal-header">
                    <h5 class="modal-title" id="mailModalLabel">Yeni Mail</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="MailAddress" class="form-label">Alıcı Mail Adresi:</label>
                        <input type="text" class="form-control" id="MailAddress" name="MailAddress"
                            value="1harunkorkmaz@gmail.com">
                    </div>
                    <div class="form-group">
                        <label for="FileNamea" class="form-label">Dosya Adı:</label>
                        <input type="text" readonly class="form-control" id="FileNamea" name="FileName" val="">
                    </div>
                    <div class="form-group">
                        <label for="message-text" class="form-label">Gönderen Mail Adres:</label>
                        <input type="text" class="form-control" readonly value="harun.korkmaz@diginova.com.tr">
                    </div>
                    <div class="form-group">
                        <img id="latestImg" class="img-fluid" src="" alt="Resim" />
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Gönder</button>
                </div>
            </form>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {

        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": true,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "300",
            "timeOut": "1500",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        $('#open-door').click(function () {
            var selectedSpeed = $('input[name="speed"]:checked').val();
            $.post('/Home/OpenDoor', { speed: selectedSpeed })
                .done(function (response) {
                    if (response.isSuccess === true) {
                        console.log('İşlem başarıyla tamamlandı.');
                        Swal.fire({
                            icon: "success",
                            title: "Başarılı!",
                            text: response.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    } else {
                        console.log('İşlem tamamlanamadı.');
                        Swal.fire({
                            icon: "error",
                            title: "Hata!",
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                })
                .fail(function (response) {
                    Swal.fire({
                        icon: "error",
                        title: "Hata!",
                        showConfirmButton: false,
                        timer: 2000
                    });
                });
        });

        $('#close-door').click(function () {
            $.post('/Home/CloseDoor')
                .done(function (response) {
                    if (response.isSuccess === true) {
                        console.log('İşlem başarıyla tamamlandı.');
                        Swal.fire({
                            icon: "success",
                            title: "Başarılı!",
                            text: response.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    } else {
                        console.log('İşlem tamamlanamadı.');
                        Swal.fire({
                            icon: "error",
                            title: "Hata!",
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                })
                .fail(function (response) {
                    Swal.fire({
                        icon: "error",
                        title: "Hata!",
                        showConfirmButton: false,
                        timer: 2000
                    });
                });
        });

        $('#set-fan-speed').click(function () {
            var selectedGasSpeed = $('input[name="fanSpeed"]:checked').val();

            $.post('/Home/SendGasSpeed', { fanSpeed: selectedGasSpeed })
                .done(function (response) {
                    if (response.isSuccess === true) {
                        console.log('İşlem başarıyla tamamlandı.');
                        Swal.fire({
                            icon: "success",
                            title: "Başarılı!",
                            text: response.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    } else {
                        console.log('İşlem tamamlanamadı.');
                        Swal.fire({
                            icon: "error",
                            title: "Error!",
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                })
                .fail(function (response) {
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        showConfirmButton: false,
                        timer: 2000
                    });
                });
        });

        $('#set-brightness').click(function () {
            var selectedLightBrightness = $('input[name="lightBrightness"]:checked').val();

            $.post('/Home/SendLightBrightness', { lightBrightness: selectedLightBrightness })
                .done(function (response) {
                    if (response.isSuccess === true) {
                        console.log('İşlem başarıyla tamamlandı.');
                        Swal.fire({
                            icon: "success",
                            title: "Başarılı!",
                            text: response.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    } else {
                        console.log('İşlem tamamlanamadı.');
                        Swal.fire({
                            icon: "error",
                            title: "Error!",
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                })
                .fail(function (response) {
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        showConfirmButton: false,
                        timer: 2000
                    });
                });
        });

        function getProximitySensorData() {
            // 172.20.10.12
            // 10.42.0.41
            $.getJSON('http://192.168.1.68:5000/flask/sensor/hcsr04')
                .done(function (data) {
                    console.log(data);
                    $('#proximity-sensor').text('Sensör Değeri: ' + data + " cm");
                    if (data <= 20) {
                        $('#proximity-box').addClass('highlight');
                        toastr["error"]("Kapıya Araç Yaklaştı!", "Yakınlık Sensörü");
                    } else {
                        $('#proximity-box').removeClass('highlight');
                    }
                })
                .fail(function () {
                    console.error('Yakınlık sensörü verileri alınamadı.');
                });
        }

        function getGasSensorData() {
            $.getJSON('http://192.168.1.68:5000/flask/sensor/gas')
                .done(function (data) {
                    console.log(data);
                    if (data != 0) {
                        $('#gas-box').removeClass('highlight');
                    } else {
                        $('#gas-box').addClass('highlight');
                        toastr["error"]("Gas Algılandı! Fanı Çalıştırın!", "Gaz Sensörü");
                    }
                })
                .fail(function () {
                    console.error('Gaz sensörü verileri alınamadı.');
                });
        }

        function getGasSensorDataI2C() {
            $.getJSON('http://192.168.1.68:5000/flask/sensor/gas/0')
                .done(function (data) {
                    console.log(data);
                    var sensorValue = data.sensor_value;
                    var percentage = (sensorValue / 32768) * 100; // Assuming sensor value range is 0-1023
                    $('#gas-sensor').text('Sensör Değeri: ' + sensorValue + ' | Yüzde: ' + percentage.toFixed(2) + '%');
                })
                .fail(function () {
                    console.error('Gaz sensörü I2C verileri alınamadı.');
                });
        }


        function checkRecordingStatus() {
            $.ajax({
                url: '/stream/checkRecordingStatus',
                type: 'GET',
                success: function (response) {
                    if (response.isSuccess === true) {
                        $('#recordingIndicator').addClass('recording');
                    } else {
                        $('#recordingIndicator').removeClass('recording');
                    }
                },
                error: function () {
                    console.error('Durum alınamadı');
                }
            });
        }

        $("#startRecordingBtn").click(function () {
            $.ajax({
                url: '/stream/startRecording',
                type: 'POST',
                success: function (response) {
                    debugger;
                    if (response.isSuccess === true) {
                        Swal.fire({
                            icon: "success",
                            title: "Başarılı!",
                            text: response.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                        $("#startRecordingBtn").prop("disabled", true);
                        $("#stopRecordingBtn").prop("disabled", false);
                    } else {
                        Swal.fire('Hata', 'Kayıt başlatılamadı!', 'error');
                    }
                },
                error: function () {
                    Swal.fire('Hata', 'İstek gönderilirken bir hata oluştu!', 'error');
                }
            });
        });

        $("#stopRecordingBtn").click(function () {
            $.ajax({
                url: '/stream/stopRecording',
                type: 'POST',
                success: function (response) {
                    debugger;
                    if (response.isSuccess === true) {
                        Swal.fire({
                            icon: "success",
                            title: "Başarılı!",
                            text: response.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                        $("#startRecordingBtn").prop("disabled", false);
                        $("#stopRecordingBtn").prop("disabled", true);
                        refreshComponent();
                    } else {
                        Swal.fire('Hata', 'Kayıt durdurulamadı!', 'error');
                    }
                },
                error: function () {
                    Swal.fire('Hata', 'İstek gönderilirken bir hata oluştu!', 'error');
                }
            });
        });

        function refreshComponent() {
            debugger;
            $.ajax({
                type: 'GET',
                url: '/File/ReloadEvents',
                success: function(data) {
                    debugger;
                    console.log(data); 
                    $('#event').html(data);
                },
                error: function(error) {
                    console.log(error);
                }
            });
        }

        $("#photo").click(function () {
            $.ajax({
                url: '/Stream/CapturePhoto',
                type: 'POST',
                success: function (response) {
                    if (response.isSuccess === true) {
                        $("#FileNamea").val(response.data.fileName);
                        $("#latestImg").attr("src", "/File/GetFile?filePath=" + response.data.fileName + ".png");
                        $("#exampleModal").modal('show');
                        refreshComponent();
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Hata!",
                            text: response.message,
                            showConfirmButton: false,
                            timer: 2000
                        })
                    }
                },
                error: function () {
                    Swal.fire('Hata', 'İstek gönderilirken bir hata oluştu!', 'error');
                }
            });
        });

        $("#stopRecordingBtn").prop("disabled", true);
        var IpAddress = "http://10.42.0.41";
        
        checkRecordingStatus();
        
        $('#streamImg').attr('src', IpAddress + ':8000/stream.mjpg');

        setInterval(checkRecordingStatus, 10000);

        setInterval(function () {
            getProximitySensorData();
            getGasSensorData();
            getGasSensorDataI2C();
        }, 1500);

    });

</script>

<style>
    .highlight {
        background-color: red;
        color: black;
    }

    .box {
        box-shadow: .1rem .1rem .2rem #80D4FF;
        border-radius: .4rem;
        border-width: .01rem;
        border-style: solid;
        margin-left: .4rem;
        padding: .2rem .7rem .3rem .7rem;
        margin-bottom: .5rem;
        margin-top: .3rem;
    }

    .recording {
        background: red !important;
    }
</style>
